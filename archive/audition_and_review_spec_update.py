#!/usr/bin/env python
"""
audition_and_review.py – Voice-spec refinement loop that UPDATES the spec.

This script performs N rounds of writing + critic feedback. Unlike
`audition_iterative.py`, the `voice_spec.md` is updated by the critic panel
output after each round, allowing the voice to evolve.

"""

from __future__ import annotations

import argparse, json, os, pathlib, shutil, subprocess, sys
from scripts.utils.logging_helper import get_logger
from scripts.utils.paths import CTX_DIR, VOICE_DIR, ROOT
from scripts.utils.io_helpers import read_utf8, write_utf8, ensure_utf8_windows


# ── logging & constants ────────────────────────────────────────────────────
log = get_logger()
WRITER   = ROOT / "scripts" / "writer.py"
CRITIC   = ROOT / "scripts" / "critic_panel.py"
MAX_ROUNDS = 2 # Default refinement rounds before final pass


# ── helpers ────────────────────────────────────────────────────────────────
def call_writer(out_dir: pathlib.Path, persona: str, chapters: list[str], spec_path: pathlib.Path):
    """Invoke writer.py once per chapter using the specified spec."""
    for ch in chapters:
        cmd = [sys.executable, str(WRITER), ch, "--persona", persona,
               "--spec", str(spec_path),
               "--audition-dir", str(out_dir)]
        log.info("RUN: %s", " ".join(cmd))
        subprocess.run(cmd, check=True, cwd=ROOT)

def run_critic(draft_dir: pathlib.Path, rnd: int) -> pathlib.Path:
    """Run the critic panel and return the JSON manifest path."""
    out_path = draft_dir / f"critic_round{rnd}.json"
    cmd = [sys.executable, str(CRITIC),
           "--draft-dir", str(draft_dir),
           "--round", str(rnd),
           "--output", str(out_path)]
    log.info("RUN: %s", " ".join(cmd))
    subprocess.run(cmd, check=True, cwd=ROOT)
    return out_path

def create_final_version(persona: str, chapters: list[str], last_round_dir: pathlib.Path):
    """Create final versions incorporating the last critic feedback and the final spec.
    Output goes into the auditions directory as `<persona>_final`.
    """
    final_dir = ROOT / "drafts" / "auditions" / f"{persona}_final"
    final_dir.mkdir(parents=True, exist_ok=True)

    # 1) Copy the final spec from the last audition round
    last_spec_path = last_round_dir / "voice_spec.md"
    final_spec_path = final_dir / "voice_spec.md"
    if not last_spec_path.exists():
        raise FileNotFoundError(f"Spec from last round not found: {last_spec_path}")
    shutil.copy(last_spec_path, final_spec_path)
    log.info("Final spec copied from %s", last_spec_path)

    # 2) Copy critic feedback for traceability
    critic_file = last_round_dir / f"critic_round{last_round_dir.name.split('_')[-1]}.json"
    final_critic_path = final_dir / "critic_feedback.json"
    if not critic_file.exists():
         raise FileNotFoundError(f"Critic feedback JSON not found: {critic_file}")
    shutil.copy(critic_file, final_critic_path)

    # 3) Generate final versions incorporating feedback and the final spec
    for ch in chapters:
        cmd = [sys.executable, str(WRITER), ch, "--persona", persona,
               "--spec", str(final_spec_path),
               "--audition-dir", str(final_dir),
               "--critic-feedback", str(final_critic_path)] # Pass the final feedback
        log.info("RUN: %s", " ".join(cmd))
        subprocess.run(cmd, check=True, cwd=ROOT)

    log.info("Final versions created in %s", final_dir)


# ── main loop ──────────────────────────────────────────────────────────────
def main():
    ensure_utf8_windows() # Ensure UTF-8 early
    # TODO: Use argparse for better CLI handling
    if len(sys.argv) < 3:
        print(f"Usage: {sys.argv[0]} persona chapters_to_write")
        sys.exit(1)
    persona   = sys.argv[1]
    num_chaps = int(sys.argv[2])
    chapters  = [f"lotm_{i:04d}" for i in range(1, num_chaps+1)]

    last_round_dir = None # Track the directory of the final round

    for rnd in range(1, MAX_ROUNDS+1):
        spec_dir = ROOT / "drafts" / "auditions" / f"{persona}_{rnd}"
        spec_dir.mkdir(parents=True, exist_ok=True)

        # Define the standard spec path for *this* round
        spec_path_in_round = spec_dir / "voice_spec.md"

        # 1) Determine INPUT spec for this round and copy it to spec_path_in_round
        if rnd == 1:
            # Use canonical spec for the first round
            input_spec_path = VOICE_DIR / f"{persona}.md"
            if not input_spec_path.exists():
                raise FileNotFoundError(f"Canonical spec not found: {input_spec_path}")
            log.info(f"Round 1: Using canonical spec {input_spec_path}")
        else:
            # Use the spec generated by the *previous* round's critic
            prev_spec_dir = ROOT / "drafts" / "auditions" / f"{persona}_{rnd-1}"
            input_spec_path = prev_spec_dir / "voice_spec.md" # Should have been updated last round
            if not input_spec_path.exists():
                raise FileNotFoundError(f"Previous round's spec not found: {input_spec_path}")
            log.info(f"Round {rnd}: Using spec from round {rnd-1}: {input_spec_path}")

        shutil.copy(input_spec_path, spec_path_in_round)

        # 2) Writer generates drafts using the spec now present in spec_dir
        call_writer(spec_dir, persona, chapters, spec_path_in_round)

        # 3) Critics read drafts + the spec in spec_dir
        manifest = run_critic(spec_dir, rnd)
        log.info("critic notes saved → %s", manifest)

        # 4) Update the spec in spec_path_in_round with critic output for the *next* round
        with open(manifest, 'r', encoding='utf-8') as f:
            panel_notes = json.load(f)
        new_spec_content = panel_notes["updated_spec_md"]
        write_utf8(spec_path_in_round, new_spec_content) # Overwrite with new content
        log.info("Updated spec saved for next round → %s", spec_path_in_round)

        # Keep track of the last completed round's directory
        last_round_dir = spec_dir

    # 5) If rounds were run, create final versions using the last round's dir
    if last_round_dir:
        create_final_version(persona, chapters, last_round_dir)
    else:
        log.warning("No rounds were run, skipping final version creation.")

if __name__ == "__main__":
    main()
